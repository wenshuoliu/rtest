// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "rtest_types.h"
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// convolveCpp
NumericVector convolveCpp(NumericVector a, NumericVector b);
RcppExport SEXP rtest_convolveCpp(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    __result = Rcpp::wrap(convolveCpp(a, b));
    return __result;
END_RCPP
}
// transpose
MatrixXd transpose(MatrixXd Amat);
RcppExport SEXP rtest_transpose(SEXP AmatSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< MatrixXd >::type Amat(AmatSEXP);
    __result = Rcpp::wrap(transpose(Amat));
    return __result;
END_RCPP
}
// matrix_test
void matrix_test(MatrixXd Amat);
RcppExport SEXP rtest_matrix_test(SEXP AmatSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< MatrixXd >::type Amat(AmatSEXP);
    matrix_test(Amat);
    return R_NilValue;
END_RCPP
}
// callR
List callR(MatrixXd Dmat, VectorXd dvec, MatrixXd Amat, Function f);
RcppExport SEXP rtest_callR(SEXP DmatSEXP, SEXP dvecSEXP, SEXP AmatSEXP, SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< MatrixXd >::type Dmat(DmatSEXP);
    Rcpp::traits::input_parameter< VectorXd >::type dvec(dvecSEXP);
    Rcpp::traits::input_parameter< MatrixXd >::type Amat(AmatSEXP);
    Rcpp::traits::input_parameter< Function >::type f(fSEXP);
    __result = Rcpp::wrap(callR(Dmat, dvec, Amat, f));
    return __result;
END_RCPP
}
// vecIndex
void vecIndex();
RcppExport SEXP rtest_vecIndex() {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    vecIndex();
    return R_NilValue;
END_RCPP
}
// orderBeta
NumericMatrix orderBeta(int p, int q, double theta, bool ref);
RcppExport SEXP rtest_orderBeta(SEXP pSEXP, SEXP qSEXP, SEXP thetaSEXP, SEXP refSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< bool >::type ref(refSEXP);
    __result = Rcpp::wrap(orderBeta(p, q, theta, ref));
    return __result;
END_RCPP
}
// sugerTest
NumericVector sugerTest(int N, double mu, double sigma);
RcppExport SEXP rtest_sugerTest(SEXP NSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    __result = Rcpp::wrap(sugerTest(N, mu, sigma));
    return __result;
END_RCPP
}
// timesTwo
NumericVector timesTwo(NumericVector x);
RcppExport SEXP rtest_timesTwo(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    __result = Rcpp::wrap(timesTwo(x));
    return __result;
END_RCPP
}
